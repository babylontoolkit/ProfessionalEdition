REACT-VITE-UI

===============
Create Project
===============
npm create vite@latest UserInterface -- --template react-ts


==============
Node Commands
==============
npm install react-router-dom react-icons @mui/material @emotion/react @emotion/styled --save
npm install fs-extra eslint-config-react-app vite-plugin-eslint --save-dev


=============
Postbuild.js
=============
import fs from "fs-extra";
// ..
// Remove index.html (Development Build)
// ..
fs.remove("dist/index.html", function (err) {
    if (err) return console.error(err)
    console.log("Deleted dev index.html successfully!")
});


============
Package.json
============
"scripts": {
  "dev": "vite",
  "build": "tsc && vite build && node postbuild.js",
  "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
  "preview": "vite preview"
},


============
Vite Config
============
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
// https://vitejs.dev/config/
export default defineConfig({
  base: "/react/",
  build: {
    outDir: "../assets/[public]/react",
    emptyOutDir: true,
    copyPublicDir: true,
    rollupOptions: {
      output: {
        entryFileNames: "[name].js",
        assetFileNames: "[name].[ext]",
        inlineDynamicImports: true,
      },
    }
  },
  server: { port: 3001 },
  plugins: [react()],
});


==============
Eslint Config
==============
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
  ],
  ignorePatterns: ["dist", ".eslintrc.cjs"],
  parser: "@typescript-eslint/parser",
  plugins: ["react-refresh"],
  rules: {
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "react-refresh/only-export-components": [
      "warn",
      { allowConstantExport: true },
    ],
  },
};


==================
React Example Css
==================
#root {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
}


===================
React Example Main
===================
import { AppManager } from "./global.ts";
import * as React from "react";
import * as ReactDOM from "react-dom/client";
import App from "./App.tsx"
import "./index.css";

window.AppManager = AppManager; // Note: Expose AppManager To The Global Scope
ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


==================
React Example App
==================
import { AppManager } from "./global";
import { useState, useEffect } from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import "./App.css";

function App() {
  const [count, setCount] = useState(0);
  const handleInitCount = (count:number) => {
    setCount(count);
  };
  const handleButtonClick = () => {
    setCount((count) => count + 1);
    AppManager.EventBus.PostMessage("App::CountUpdated", count + 1);
  };
  useEffect(() => { // Handle Init Count Message
    AppManager.EventBus.OnMessage("App::InitCount", handleInitCount);
    return () => { AppManager.EventBus.RemoveHandler("App::InitCount", handleInitCount); };
  },[]);

  return (
    <Router>
      <Routes>
        <Route path="/react/" element={
          <div className="card">
            <button onClick={handleButtonClick}>
              Test Count: {count}
            </button>
          </div>
        }/>
      </Routes>
    </Router>
  );
}

export default App;


import { AppManager } from "./global"
import { useState, useEffect } from "react";
import "./App.css"

function App() {
  const [windowState, setWindowState] = useState(0);

  const playButtonClick = () => {
    const defaultPlayer: string = "Default Player";
    const queryString: string = ("?player=" + defaultPlayer);
    const selectedScene: string = (document.getElementById("sel1") as HTMLSelectElement).value;
    if (selectedScene != null && selectedScene !== "") {
      hideRoot();
      handleWindowState(1);
      AppManager.LoadSelectedScene(selectedScene, queryString);
    }
  };

  const handleWindowState = (state: number) => {
    if (state !== null && state !== undefined && state >= 0) {
      setWindowState(state);
    }
  }

  const showRoot = () => document.getElementById("root")?.style.setProperty("z-index", "100");
  const hideRoot = () => document.getElementById("root")?.style.setProperty("z-index", "-1");

  useEffect(() => { // Handle Window Message Events
    AppManager.EventBus.OnMessage("hidesceneloader", showRoot);
    AppManager.EventBus.OnMessage("setwindowstate", handleWindowState);
    return () => {
      AppManager.EventBus.RemoveHandler("hidesceneloader", showRoot);
      AppManager.EventBus.RemoveHandler("setwindowstate", handleWindowState);
    };
  }, []);

  return (
    <>

      {windowState === 0 && ( // Main Menu
        <div>
          <h1>Babylon Toolkit 2024</h1>

          <div>
            <label htmlFor="sel1">Select Demo Scene</label>
            <br />
            <select id="sel1">
              <option value="samplescene.gltf">Sample Scene</option>
            </select>
          </div>
          <br />

          <button onClick={playButtonClick}>
            Play Demo Scene
          </button>
          <br />

          <p className="read-the-docs">
            <br />
            Visit the <a href="https://doc.babylonjs.com/communityExtensions/Unity" target="_blank" rel="noreferrer">Babylon Toolkit Documentation</a> for more information.
          </p>
        </div>
      )}

      {windowState === 1 && ( // Game Overlay
        <div>
          Demo Game Overlay
        </div>
      )}

    </>
  )
}

export default App